# SPDX-FileCopyrightText: Magenta ApS
#
# SPDX-License-Identifier: MPL-2.0

################################################################################
# Changes to this file requires approval from Labs. Please add a person from   #
# Labs as required approval to your MR if you have any changes.                #
################################################################################

# For `docker push` to work, the following envionment variables have to set in
# the Gitlab UI.
# RELEASE_REGISTRY_USER
# RELEASE_REGISTRY_PASSWORD

stages:
  - lint
  # build stage is not blocked by lint stage, as we have a DAG:
  # https://docs.gitlab.com/ee/ci/directed_acyclic_graph/index.html
  - build
  - test
  - release
  - deploy

variables:
  # Project variables
  RELEASE_REGISTRY_IMAGE: index.docker.io/magentaaps/os2mo-http-trigger-sdtool

  IMAGE_SHA: ${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHA}

  PRODUCT: os2mo
  COMPONENT: SDTool


# Conditions
#############
.if-default-branch-refs: &if-default-branch-refs
  if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'

.if-tag: &if-tag
  if: '$CI_COMMIT_TAG'

.if-tag-semver: &if-tag-semver
  if: '$CI_COMMIT_TAG =~ /^(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)$/'

.if-merge-request: &if-merge-request
  if: '$CI_MERGE_REQUEST_IID'

.if-schedule: &if-schedule
  if: '$CI_PIPELINE_SOURCE == "schedule"'

# Sync Conditions
.if-merge-request-labels-dont-interrupt: &if-merge-request-labels-dont-interrupt
  if: "$CI_MERGE_REQUEST_LABELS =~ /Pipeline::Sync::Don't Interrupt/"


# Workflow
###########
workflow:
  rules:
    - <<: *if-tag
    - <<: *if-default-branch-refs
    - <<: *if-merge-request

include:
  - project: 'labs/salt-automation'
    file:
      - gitlab-ci-templates/common/conventional-commits.v1.yml
      - gitlab-ci-templates/common/config-updater-salt.v1.yml
      - gitlab-ci-templates/common/config-updater-flux.v1.yml
      - gitlab-ci-templates/common/docker-release.v1.yml

# Lint stage
#############

.lint-default: &lint-default
  stage: lint
  needs: []
  image: python:3.11
  services: []

TypeCheck Python:
  <<: *lint-default
  before_script:
    - pip3 install -r requirements/lint.txt
  script:
    - python -m mypy --ignore-missing-imports --strict-optional --no-implicit-optional app/ tests/

Lint Python:
  <<: *lint-default
  before_script:
    - pip3 install -r requirements/lint.txt
  script:
    - python -m black --diff --check app/
    - python -m isort --profile black --diff --check-only app/ tests/

Lint Dockerfiles:
  <<: *lint-default
  image: hadolint/hadolint:latest-debian
  before_script:
    - apt-get -y update
    - apt-get -y install --no-install-recommends git
  script:
    - git ls-files --exclude='Dockerfile*' --ignored | xargs --max-lines=1 hadolint

REUSE compliance:
  <<: *lint-default
  image:
    name: fsfe/reuse:latest
    entrypoint: [""]
  script:
    - reuse lint


# Build stage
#############

Build Image:
  stage: build
  needs: []
  image:
    # We use kaniko v0.16.0 as both v0.17.0, v0.17.1, v0.18.0 and v0.19.0 contains fatal bugs.
    name: gcr.io/kaniko-project/executor:debug-v0.16.0
    entrypoint: [""]
  script:
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"$CI_REGISTRY_USER\",\"password\":\"$CI_REGISTRY_PASSWORD\"}}}" > /kaniko/.docker/config.json
    - /kaniko/executor
      --cache
      --context=$CI_PROJECT_DIR
      --dockerfile=$CI_PROJECT_DIR/Dockerfile
      --destination=${IMAGE_SHA}


# Test stage
############

.test-default: &test-default
  stage: test
  needs: ["Build Image"]
  services: []
  before_script:
    - pip3 install -r requirements/test.txt

Unit-test:
  <<: *test-default
  image:
    name: ${IMAGE_SHA}
  script:
    - pytest
      --cov=app
      --junitxml $CI_PROJECT_DIR/junit.xml
      --cov-report html:$CI_PROJECT_DIR/coverage-html
      --cov-report term
      -p no:cacheprovider
      --color=yes
      tests/
  coverage: '/TOTAL.*\s+(\d+%)$/'
  artifacts:
    when: always
    paths:
      - $CI_PROJECT_DIR/coverage-html
    reports:
      junit: $CI_PROJECT_DIR/junit.xml
